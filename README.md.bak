# go-conductor

A lightweight HTTP request multiplexer that sends a single request to multiple backend services and returns the response from the primary service.

## How It Works

```
                                       ┌─────────────────────┐
                                       │                     │
                                  ┌───▶│ Service A (PRIMARY) │───┐
                                  │    │                     │   │
                                  │    └─────────────────────┘   │
                                  │                              │
                                  │    ┌─────────────────────┐   │
┌───────────┐    ┌────────────┐   │    │                     │   │    ┌────────────┐
│           │    │            │───┼───▶│ Service B           │   │    │            │
│  Client   │───▶│ go-conductor│───┘    │                     │   └───▶│  Response   │
│           │    │            │        └─────────────────────┘        │  from A     │
└───────────┘    └────────────┘                                       └────────────┘
                                       ┌─────────────────────┐
                                       │                     │
                                       │ Service C           │
                                       │                     │
                                       └─────────────────────┘
                                       (Not matching route)
```

1. When a request arrives, go-conductor finds all matching services based on the URL path
2. The request is sent simultaneously to all matching services
3. The conductor waits for responses from all services (or until timeout)
4. The response from the primary service is returned to the client
5. If the primary service fails, a successful response from any other service is used as fallback
6. If all services fail, a 502 Bad Gateway error is returned

## Features

- Fan-out a single HTTP request to multiple backend services
- Return the response from the designated primary service
- Fall back to any successful response if the primary service fails
- Add custom headers to proxied requests
- Simple YAML configuration
- Configurable timeout handling

## Installation

```bash
go get github.com/zeek-r/go-conductor
```

## Usage

1. Create a configuration file (config.yaml):

```yaml
port: 8080
timeout: 10  # request timeout in seconds

services:
  - name: api-service-primary
    url: http://localhost:8081
    pathPrefix: /api
    primary: true
    headers:
      X-Proxy-Service: api-service-primary

  - name: api-service-secondary
    url: http://localhost:8082
    pathPrefix: /api
    headers:
      X-Proxy-Service: api-service-secondary

  - name: web-service
    url: http://localhost:8083
    pathPrefix: /web
    primary: true
    headers:
      X-Proxy-Service: web-service
```

2. Run the proxy:

```bash
go-conductor --config config.yaml
```

## Flow Diagram

```
┌─────────┐     ┌─────────────┐     ┌────────────────┐     ┌──────────────┐
│ Request │────▶│ Match Route │────▶│ Fan-out Request│────▶│ Wait for     │
└─────────┘     └─────────────┘     └────────────────┘     │ Responses    │
                                                          └───────┬──────┘
                                                                  │
                                                                  ▼
┌─────────┐     ┌─────────────┐     ┌────────────────┐     ┌──────────────┐
│ Response│◀────│ Return to   │◀────│ Select Primary │◀────│ Collect      │
│         │     │ Client      │     │ Response       │     │ Results      │
└─────────┘     └─────────────┘     └────────────────┘     └──────────────┘
```

## Configuration Options

### Top-level Configuration

- `port`: The port on which the proxy will listen (default: 8080)
- `timeout`: Request timeout in seconds (default: 30)
- `services`: A list of backend services to proxy to

### Service Configuration

- `name`: A descriptive name for the service
- `url`: The URL of the backend service
- `primary`: Set to true for the service whose response should be returned (at least one per path pattern)
- `path`: The base path for this service (used as fallback)
- `pathPrefix`: Route requests with this path prefix to the service
- `pathExact`: Route requests with exactly this path to the service
- `headers`: Map of custom headers to add to requests

## Practical Use Cases

- **Testing in Production**: Send requests to both production and staging environments, but only return production responses
- **Shadow Traffic**: Test new service implementations by sending them real traffic without affecting users
- **Resiliency**: Add redundancy by sending requests to multiple instances and using the first successful response
- **Data Collection**: Send the same data to multiple systems while preserving the primary response flow
- **A/B Testing**: Send traffic to different implementations for analysis without affecting the user experience

## Example Scenarios

### Scenario 1: API Migration

```
┌───────────┐    ┌────────────┐    ┌──────────────────────┐
│           │    │            │───▶│ API v1 (PRIMARY)     │
│  Client   │───▶│ go-conductor│    └──────────────────────┘
│           │    │            │    ┌──────────────────────┐
└───────────┘    └────────────┘───▶│ API v2 (new version) │
                                   └──────────────────────┘
```

Test a new API version with real production traffic while ensuring clients still get responses from the stable version.

### Scenario 2: Redundant Services

```
┌───────────┐    ┌────────────┐    ┌──────────────────────┐
│           │    │            │───▶│ Service A (PRIMARY)  │
│  Client   │───▶│ go-conductor│    └──────────────────────┘
│           │    │            │    ┌──────────────────────┐
└───────────┘    └────────────┘───▶│ Service B (backup)   │
                                   └──────────────────────┘
```

Send requests to both primary and backup services, automatically falling back to the backup if the primary fails.

## Building from Source

```bash
git clone https://github.com/zeek-r/go-conductor.git
cd go-conductor
go build
```

## License

MIT 